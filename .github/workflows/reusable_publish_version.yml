on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "The name of this release environment. It can be a 'nightly', 'beta' or 'release'"
      git-ref:
        required: true
        type: string
        description: "The git ref of this release version. All 'actions/checkout' steps will use it"
      latest:
        required: false
        type: boolean
        default: false
        description: "Consider this release as the latest one and update the Docker image tag and the binary pointer for the installers"
      publish:
        required: false
        type: boolean
        default: false
        description: "Whether to publish this release"
      create-release:
        required: false
        type: boolean
        default: false
        description: "Create a GitHub release"

defaults:
  run:
    shell: bash

jobs:
  prepare-vars:
    name: Prepare vars
    runs-on: ubuntu-latest
    outputs:
      git-ref: ${{ steps.outputs.outputs.git-ref }}
      name: ${{ steps.outputs.outputs.name }}
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git-ref || github.ref_name }}

      - name: Install a TOML parser
        run: cargo install --force --locked --version 0.8.1 taplo-cli

      - name: Configure git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git config --add --bool push.autoSetupRemote true

      - name: Patch release version
        if: ${{ inputs.environment == 'release' }}
        run: |
          set -x

          currentVersion=$(/home/runner/.cargo/bin/taplo get -f lib/Cargo.toml "package.version")

          if [[ $currentVersion == *"-beta"* ]]; then
            major=$(echo $currentVersion | tr "." "\n" | sed -n 1p)
            minor=$(echo $currentVersion | tr "." "\n" | sed -n 2p)
            betaNum=$(echo $currentVersion | tr "." "\n" | sed -n 4p)
            version=${major}.${minor}.$(($betaNum - 1))

            # Bump the crate version
            sed -i "s#^version = \".*\"#version = \"${version}\"#" Cargo.toml
            sed -i "s#^version = \".*\"#version = \"${version}\"#" lib/Cargo.toml

            # Update Cargo.lock without updating dependency versions
            cargo check --no-default-features --features storage-mem

            # Commit changes
            git commit -am "Prepare v${version} release"
          else
            version=${currentVersion}
          fi

          # Create the tag
          git tag -a v${version} -m "Release ${version}"

      - name: Create or patch beta branch
        if: ${{ inputs.environment == 'beta' }}
        run: |
          set -x

          currentVersion=$(/home/runner/.cargo/bin/taplo get -f lib/Cargo.toml "package.version")

          if [[ $currentVersion == *"-beta"* ]]; then
            major=$(echo $currentVersion | tr "." "\n" | sed -n 1p)
            minor=$(echo $currentVersion | tr "." "\n" | sed -n 2p)
            patchAndMeta=$(echo $currentVersion | tr "." "\n" | sed -n 3p)
            betaNum=$(echo $currentVersion | tr "." "\n" | sed -n 4p)
            betaVersion=${major}.${minor}.${patchAndMeta}.$(($betaNum + 1))
          else
            git checkout -b releases/beta
            major=$(echo $currentVersion | tr "." "\n" | sed -n 1p)
            minor=$(echo $currentVersion | tr "." "\n" | sed -n 2p)
            betaVersion=${major}.$(($minor + 1)).0-beta.1
          fi

          # Bump the crate version
          sed -i "s#^version = \".*\"#version = \"${betaVersion}\"#" Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${betaVersion}\"#" lib/Cargo.toml

          # Update Cargo.lock without updating dependency versions
          cargo check --no-default-features --features storage-mem

          # Commit changes
          git commit -am "Prepare v${betaVersion} release"

          # Create the tag
          git tag -a v${betaVersion} -m "Release ${betaVersion}"

      - name: Push new changes
        if: ${{ inputs.publish && (inputs.environment == 'beta' || inputs.environment == 'release') }}
        run: |
          git push

      - name: Set outputs
        id: outputs
        run: |
          set -x

          if [[ "${{ inputs.environment }}" == "beta" && "${{ inputs.publish }}" == "true" ]]; then
            echo "git-ref=releases/beta" >> $GITHUB_OUTPUT
          else
            echo "git-ref=${{ inputs.git-ref || github.ref_name }}" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ inputs.environment }}" == "nightly" ]]; then
            echo "name=${{ inputs.environment }}" >> $GITHUB_OUTPUT

            date=$(git show --no-patch --format=%ad --date=format:%Y%m%d)
            rev=$(git rev-parse --short HEAD)
            echo "build-metadata=${date}.${rev}" >> $GITHUB_OUTPUT
          else
            version=$(/home/runner/.cargo/bin/taplo get -f lib/Cargo.toml "package.version")
            echo "name=v${version}" >> $GITHUB_OUTPUT

            echo "build-metadata=\"\"" >> $GITHUB_OUTPUT
          fi
