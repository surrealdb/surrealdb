on:
  workflow_call:
    inputs:
      git-ref:
        required: true
        type: string
        description: "The git ref of this release version. All 'actions/checkout' steps will use it"
      nightly-release:
        required: false
        type: boolean
        default: true
        description: "Make this a nightly release"
      latest:
        required: false
        type: boolean
        default: false
        description: "Consider this release as the latest one and update the Docker image tag and the binary pointer for the installers"
      publish:
        required: false
        type: boolean
        default: false
        description: "Whether to publish this release"
      create-release:
        required: false
        type: boolean
        default: false
        description: "Create a GitHub release"
      rust-version:
        required: false
        type: string
        default: "1.87.0"
        description: "The Rust version to use for building binaries"
      onnx-version:
        required: false
        type: string
        default: "1.16.3"
        description: "The ONNX library version"
      extra-features:
        required: false
        type: string
        description: "Extra features enabled in the binary"
    secrets:
      AWS_CI_ACCESS_KEY_ID:
        description: "AWS access key ID"
      AWS_CI_SECRET_ACCESS_KEY:
        description: "AWS secret access key"

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  prepare-vars:
    permissions:
      contents: write
    name: Prepare vars
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.outputs.outputs.name }}
      version: ${{ steps.outputs.outputs.version }}
      pre-release: ${{ steps.outputs.outputs.pre-release }}
      release-name: ${{ steps.outputs.outputs.release-name }}
      build-metadata: ${{ steps.outputs.outputs.build-metadata }}
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.git-ref }}

      - name: Set outputs
        id: outputs
        run: |
          set -x

          version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages | map(select(.name == "surrealdb"))[0].version')
          echo "version=${version}" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.nightly-release }}" == "true" ]]; then
            date=$(git show --no-patch --format=%ad --date=format:%Y%m%d)
            rev=$(git rev-parse --short HEAD)
            build_metadata=${date}.${rev}
            echo "build-metadata=${build_metadata}" >> $GITHUB_OUTPUT
            echo "name=nightly" >> $GITHUB_OUTPUT
            echo "pre-release=true" >> $GITHUB_OUTPUT
            echo "release-name=nightly" >> $GITHUB_OUTPUT
          else
            echo "name=v${version}" >> $GITHUB_OUTPUT
            if [[ $version == *"-"* ]]; then
              echo "pre-release=true" >> $GITHUB_OUTPUT
              suffix=$(echo $version | tr "-" "\n" | sed -n 2p)
              release_name=$(echo $suffix | tr "." "\n" | sed -n 1p)
              echo "release-name=${release_name}" >> $GITHUB_OUTPUT
            else
              echo "pre-release=false" >> $GITHUB_OUTPUT
              echo "release-name=stable" >> $GITHUB_OUTPUT
            fi
          fi

  test:
    name: Test
    needs: [ prepare-vars ]
    runs-on: [ runner-amd64-2xlarge ]
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.git-ref }}

      - name: Setup cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # (Actions must be pinned by commit hash) v2.7.8
        with:
          save-if: ${{ inputs.git-ref == 'main' }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@76081f88faadd9c23688b78b70c734925ea84cca # (Actions must be pinned by commit hash) cargo-llvm-cov

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test workspace + coverage
        run: cargo make ci-workspace-coverage

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf
          cat /tmp/surrealdb.log || true

      - name: Upload coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # (Actions must be pinned by commit hash) v4.6.2
        with:
          name: code-coverage-report
          path: target/llvm-cov/html/
          retention-days: 5

  format:
    name: Check format
    needs: [ prepare-vars ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # (Actions must be pinned by commit hash) v4.2.2
        with:
          ref: ${{ inputs.git-ref }}

      - name: Lookup the nightly toolchain
        id: info
        run: |
          set -x
          echo "toolchain=$(cat rust-toolchain.nightly)" >> $GITHUB_OUTPUT

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ steps.info.outputs.toolchain }}
          components: rustfmt

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check format
        run: cargo make ci-format

  check:
    name: Check workspace
    needs: [ prepare-vars ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # (Actions must be pinned by commit hash) v4.2.2
        with:
          ref: ${{ inputs.git-ref }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check workspace
        run: cargo make ci-check

  check-wasm:
    name: Check wasm
    needs: [ prepare-vars ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # (Actions must be pinned by commit hash) v4.2.2
        with:
          ref: ${{ inputs.git-ref }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}
          targets: wasm32-unknown-unknown

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check wasm
        run: cargo make ci-check-wasm

  clippy:
    name: Check clippy
    needs: [ prepare-vars ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # (Actions must be pinned by commit hash) v4.2.2
        with:
          ref: ${{ inputs.git-ref }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}
          components: clippy

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check clippy
        run: cargo make ci-clippy

  build:
    name: Release binaries
    needs: [ prepare-vars ]
    uses: ./.github/workflows/build.yml
    with:
      name: ${{ needs.prepare-vars.outputs.name }}
      build-metadata: ${{ needs.prepare-vars.outputs.build-metadata }}
      release-branch: ${{ inputs.git-ref }}
      rust-version: ${{ inputs.rust-version }}
      onnx-version: ${{ inputs.onnx-version }}
      extra-features: ${{ inputs.extra-features }}
      upload: true
    secrets: inherit

  publish-crates:
    name: Publish crates
    needs: [ test, format, check, check-wasm, clippy, build ]
    uses: ./.github/workflows/crate.yml
    with:
      git-ref: ${{ inputs.git-ref }}
      publish: ${{ inputs.publish }}
      nightly-release: ${{ inputs.nightly-release }}

  publish:
    name: Publish binaries
    permissions:
      contents: write
    needs: [ prepare-vars, publish-crates ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.git-ref }}

      - name: Download artifacts
        if: ${{ inputs.publish }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # (Actions must be pinned by commit hash) v4.3.0
        with:
          path: artifacts

      - name: Publish release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # (Actions must be pinned by commit hash) v2.2.2
        if: ${{ inputs.publish && inputs.create-release }}
        with:
          tag_name: v${{ needs.prepare-vars.outputs.version }}
          name: "Release ${{ needs.prepare-vars.outputs.version }}"
          body: "Release ${{ needs.prepare-vars.outputs.version }}"
          target_commitish: ${{ inputs.git-ref }}
          prerelease: ${{ needs.prepare-vars.outputs.pre-release }}
          make_latest: ${{ inputs.latest }}
          fail_on_unmatched_files: true
          files: |
            LICENSE
            artifacts/surreal-${{ needs.prepare-vars.outputs.name }}.*/*.tgz
            artifacts/surreal-${{ needs.prepare-vars.outputs.name }}.*/*.exe

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # (Actions must be pinned by commit hash) v5.0.0
        if: ${{ inputs.publish }}
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AMAZON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AMAZON_SECRET_KEY }}

      - name: Set latest release version
        if: ${{ inputs.publish && inputs.create-release && inputs.latest }}
        run: |
          echo v${{ needs.prepare-vars.outputs.version }} > latest.txt
          aws s3 cp --cache-control 'no-store' latest.txt s3://download.surrealdb.com/latest.txt

      - name: Set latest alpha or beta version
        if: ${{ inputs.publish && needs.prepare-vars.outputs.pre-release }}
        run: |
          echo v${{ needs.prepare-vars.outputs.version }} > ${{ needs.prepare-vars.outputs.release-name }}.txt
          aws s3 cp --cache-control 'no-store' ${{ needs.prepare-vars.outputs.release-name }}.txt s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.release-name }}.txt

      - name: Publish binaries
        if: ${{ inputs.publish }}
        run: |
          for file in artifacts/**/*.{tgz,txt,exe}; do
            aws s3 cp --cache-control 'no-store' $file s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.name }}/
          done

  docker:
    name: Docker images
    needs: [ prepare-vars, publish ]
    if: ${{ inputs.publish }}
    uses: ./.github/workflows/docker.yml
    with:
      environment: ${{ needs.prepare-vars.outputs.release-name }}
      git-ref: ${{ needs.prepare-vars.outputs.name }}
      tag-prefix: ${{ needs.prepare-vars.outputs.name }}
      latest: ${{ inputs.latest }}
      build: true
      push: true
    secrets: inherit

  package-macos:
    name: Package and publish macOS universal binary
    needs: [ prepare-vars, publish ]
    runs-on: macos-latest
    env:
      FILE: surreal-${{ needs.prepare-vars.outputs.name }}.darwin-universal
    steps:
      - name: Download amd64 binary
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # (Actions must be pinned by commit hash) v4.3.0
        with:
          name: surreal-${{ needs.prepare-vars.outputs.name }}.darwin-amd64
          path: amd64

      - name: Download arm64 binary
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # (Actions must be pinned by commit hash) v4.3.0
        with:
          name: surreal-${{ needs.prepare-vars.outputs.name }}.darwin-arm64
          path: arm64

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # (Actions must be pinned by commit hash) v5.0.0
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AMAZON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AMAZON_SECRET_KEY }}

      - name: Package universal MacOS binary
        run: |
          lipo -create -output surreal amd64/surreal arm64/surreal
          chmod +x surreal
          tar -zcvf $FILE.tgz surreal
          echo $(shasum -a 256 $FILE.tgz | cut -f1 -d' ') > $FILE.txt

      - name: Publish universal MacOS binary
        if: ${{ inputs.publish }}
        run: |
          aws s3 cp --cache-control 'no-store' $FILE.tgz s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.name }}/
          aws s3 cp --cache-control 'no-store' $FILE.txt s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.name }}/

  propagate:
    name: Propagate binaries to all regions
    if: ${{ inputs.publish }}
    environment: ${{ needs.prepare-vars.outputs.release-name }}
    needs: [ publish, package-macos, prepare-vars ]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # (Actions must be pinned by commit hash) v5.0.0
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AMAZON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AMAZON_SECRET_KEY }}

      - name: Distribute binaries
        run: |
          regions=("af-south-1" "ap-east-1" "ap-south-1" "ap-southeast-1" "ap-southeast-2" "ca-central-1" "eu-central-1" "eu-west-2" "me-south-1" "sa-east-1" "us-west-2")
          for region in ${regions[@]}; do
              aws s3 sync --delete --storage-class INTELLIGENT_TIERING --source-region eu-west-2 --region ${region} s3://download.surrealdb.com s3://download.${region}.surrealdb.com
          done
