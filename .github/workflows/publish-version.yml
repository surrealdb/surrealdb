on:
  workflow_call:
    inputs:
      git-ref:
        required: true
        type: string
        description: "The git ref of this release version. All 'actions/checkout' steps will use it"
      release-type:
        type: string
        default: nightly
        description: "The type of release, e.g. release, patch, nightly, alpha.1 or beta.1"
      latest:
        required: false
        type: boolean
        default: false
        description: "Consider this release as the latest one and update the Docker image tag and the binary pointer for the installers"
      publish:
        required: false
        type: boolean
        default: false
        description: "Whether to publish this release"
      create-release:
        required: false
        type: boolean
        default: false
        description: "Create a GitHub release"
      rust-version:
        required: false
        type: string
        default: "1.86.0"
        description: "The Rust version to use for building binaries"
      onnx-version:
        required: false
        type: string
        default: "1.16.3"
        description: "The ONNX library version"
      extra-features:
        required: false
        type: string
        description: "Extra features enabled in the binary"
    secrets:
      AWS_CI_ACCESS_KEY_ID:
        description: "AWS access key ID"
      AWS_CI_SECRET_ACCESS_KEY:
        description: "AWS secret access key"

defaults:
  run:
    shell: bash

permissions:
  contents: read
  # contents: write
  # pull-requests: write

jobs:
  prepare-vars:
    permissions:
      contents: write
    name: Prepare vars
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.outputs.outputs.environment }}
      version: ${{ steps.outputs.outputs.version }}
      patch: ${{ steps.outputs.outputs.patch }}
      current-version: ${{ steps.outputs.outputs.current-version }}
      name: ${{ steps.outputs.outputs.name }}
      build-metadata: ${{ steps.outputs.outputs.build-metadata }}
      release-branch: ${{ steps.outputs.outputs.release-branch }}
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 
        with:
          ref: ${{ inputs.git-ref }}

      - name: Set outputs
        id: outputs
        run: |
          set -x

          suffix=$(echo ${{ inputs.release-type }} | tr "." "\n" | sed -n 1p)
          patch=$(echo ${{ inputs.release-type }} | tr "." "\n" | sed -n 2p)
          version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages | map(select(.name == "surrealdb"))[0].version')
          echo "current-version=${version}" >> $GITHUB_OUTPUT

          if [[ $version == *"-"* ]]; then
            echo "Found an unexpected pre-release version, '${version}', in ${{ inputs.git-ref }}"
            exit 400
          fi

          if [[ "${{ inputs.release-type }}" != "release" && "${{ inputs.release-type }}" != "patch" && "${{ inputs.release-type }}" != "nightly" && $suffix != "alpha" && $suffix != "beta" && $suffix != "rc" ]]; then
            echo "'${{ inputs.release-type }}' is not a supported release type"
            exit 400
          fi

          if [[ $suffix == "alpha" || $suffix == "beta" || $suffix == "rc" ]]; then
            if [[ -z $patch ]]; then
              echo "Pre-releases require a patch number, e.g. beta.3"
              exit 400
            elif ! [[ $patch =~ ^[0-9]+$ ]]; then
              echo "The patch number should be an integer, found ${patch}"
              exit 400
            fi
          fi

          if [[ $suffix == "release" ]]; then
            patch=$(echo ${version} | tr "." "\n" | sed -n 3p)
            environment=stable
          elif [[ $suffix == "patch" ]]; then
            major=$(echo ${version} | tr "." "\n" | sed -n 1p)
            minor=$(echo ${version} | tr "." "\n" | sed -n 2p)
            currentPatch=$(echo ${version} | tr "." "\n" | sed -n 3p)
            patch=$(($currentPatch + 1))
            version=${major}.${minor}.${patch}
            environment=stable
          elif [[ $suffix == "nightly" ]]; then
            date=$(git show --no-patch --format=%ad --date=format:%Y%m%d)
            # This sets the nightly version to something like `1.3.20250224221932`
            patch=$(git show --no-patch --format=%ad --date=format:%Y%m%d%H%M%S)
            rev=$(git rev-parse --short HEAD)
            buildMetadata=${date}.${rev}
            version=${version}-${{ inputs.release-type }}
            environment=${{ inputs.release-type }}
          elif [[  $suffix == "rc" ]]; then
            version=${version}-${{ inputs.release-type }}
            patch=$(($patch - 1))
            environment=release-candidate
          else
            version=${version}-${{ inputs.release-type }}
            patch=$(($patch - 1))
            environment=${suffix}
          fi

          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "patch=${patch}" >> $GITHUB_OUTPUT
          echo "environment=${environment}" >> $GITHUB_OUTPUT
          echo "build-metadata=${buildMetadata}" >> $GITHUB_OUTPUT
          echo "release-branch=releases/${version}" >> $GITHUB_OUTPUT

          if [[ "${environment}" == "nightly" ]]; then
            echo "name=${environment}" >> $GITHUB_OUTPUT
          else
            echo "name=v${version}" >> $GITHUB_OUTPUT
          fi

      - name: Configure git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git config --add --bool push.autoSetupRemote true

      - name: Create release branch
        run: |
          set -x

          git push origin --delete ${{ steps.outputs.outputs.release-branch }} || true
          git checkout -b ${{ steps.outputs.outputs.release-branch }}

      - name: Patch release version
        if: ${{ inputs.release-type != 'release' }}
        run: |
          set -x

          version=${{ steps.outputs.outputs.version }}
          currentVersion=${{ steps.outputs.outputs.current-version }}

          # Bump the crate version
          sed -i "s#^version = \".*\"#version = \"${version}\"#" Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/sdk/Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/core/Cargo.toml

          # Update dependency versions
          sed -i "s#surrealdb = { version = \"=${currentVersion}\"#surrealdb = { version = \"=${version}\"#" Cargo.toml
          sed -i "s#surrealdb-core = { version = \"=${currentVersion}\"#surrealdb-core = { version = \"=${version}\"#" Cargo.toml

          # Update Cargo.lock without updating dependency versions
          cargo check --no-default-features --features storage-mem

          # Commit changes
          git commit -am "Prepare v${version} release"

      - name: Push the release branch
        run: git push

  test:
    name: Test
    needs: [prepare-vars]
    runs-on: [runner-amd64-2xlarge]
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ needs.prepare-vars.outputs.release-branch }}

      - name: Setup cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # (Actions must be pinned by commit hash) v2.7.8
        with:
          save-if: ${{ inputs.git-ref == 'main' }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@76081f88faadd9c23688b78b70c734925ea84cca # (Actions must be pinned by commit hash) cargo-llvm-cov

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test workspace + coverage
        run: cargo make ci-workspace-coverage

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf
          cat /tmp/surrealdb.log || true

      - name: Upload coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # (Actions must be pinned by commit hash) v4.6.2
        with:
          name: code-coverage-report
          path: target/llvm-cov/html/
          retention-days: 5

  lint:
    name: Lint
    needs: [prepare-vars]
    runs-on: [runner-amd64-2xlarge]
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ needs.prepare-vars.outputs.release-branch }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # (Actions must be pinned by commit hash) master
        with:
          toolchain: ${{ inputs.rust-version }}
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check workspace
        run: cargo make ci-check

      - name: Check format
        run: cargo make ci-format

      - name: Check wasm
        run: cargo make ci-check-wasm

      - name: Check clippy
        run: cargo make ci-clippy

  build:
    name: Release binaries
    needs: [prepare-vars]
    uses: ./.github/workflows/build.yml
    with:
      name: ${{ needs.prepare-vars.outputs.name }}
      build-metadata: ${{ needs.prepare-vars.outputs.build-metadata }}
      release-branch: ${{ needs.prepare-vars.outputs.release-branch }}
      rust-version: ${{ inputs.rust-version }}
      onnx-version: ${{ inputs.onnx-version }}
      extra-features: ${{ inputs.extra-features }}
      upload: true
    secrets: inherit

  publish:
    name: Publish crate and artifacts binaries
    permissions: 
      contents: write
    needs: [prepare-vars, test, lint, build]
    runs-on: [runner-amd64-2xlarge]
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ needs.prepare-vars.outputs.release-branch }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable (Actions must be pinned by commit hash)

      - name: Install release-plz
        run: |
          curl -L https://github.com/MarcoIeni/release-plz/releases/download/release-plz-v0.3.30/release-plz-x86_64-unknown-linux-gnu.tar.gz | sudo tar -xz -C /usr/bin
          sudo chmod +x /usr/bin/release-plz

      - name: Create a temporary branch
        run: git checkout -b crate

      - name: Configure release-plz
        run: |
          cat << EOF > /tmp/release-plz.toml
          [workspace]
          changelog_update = false
          git_release_enable = false
          semver_check = false
          git_tag_enable = false
          EOF

      - name: Configure git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Patch crate version
        if: ${{ needs.prepare-vars.outputs.environment != 'stable' }}
        run: |
          set -x

          # Derive crate version
          currentVersion=${{ needs.prepare-vars.outputs.current-version }}
          major=$(echo $currentVersion | tr "." "\n" | sed -n 1p)
          minor=$(echo $currentVersion | tr "." "\n" | sed -n 2p)
          version=${major}.${minor}.${{ needs.prepare-vars.outputs.patch }}

          # Update the version to a nightly one
          sed -i "s#^version = \".*\"#version = \"${version}\"#" Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/sdk/Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/core/Cargo.toml
          sed -i "s#surrealdb = { version = \"=${{ needs.prepare-vars.outputs.version }}\"#surrealdb = { version = \"=${version}\"#" Cargo.toml
          sed -i "s#surrealdb-core = { version = \"=${{ needs.prepare-vars.outputs.version }}\"#surrealdb-core = { version = \"=${version}\"#" Cargo.toml

          # Temporarily commit patch
          git commit -am "Patch crate version"

      - name: Patch crate name and description
        if: ${{ needs.prepare-vars.outputs.environment != 'stable' }}
        run: |
          set -x

          environment=${{ needs.prepare-vars.outputs.environment }}

          # Patch crate name
          sed -i "0,/surrealdb/s//surrealdb-${environment}/" crates/sdk/Cargo.toml
          sed -i "0,/surrealdb-core/s//surrealdb-core-${environment}/" crates/core/Cargo.toml

          # Patch dependency package
          sed -i "s/package = \"surrealdb\"/package = \"surrealdb-${environment}\"/" Cargo.toml
          sed -i "s/package = \"surrealdb-core\"/package = \"surrealdb-core-${environment}\"/" Cargo.toml

          # Patch the description
          if [[ $environment == 'alpha' ]]; then
            start="An"
          else
            start="A"
          fi
          sed -i "s#^description = \".*\"#description = \"${start} ${environment} release of the surrealdb crate\"#" crates/sdk/Cargo.toml
          sed -i "s#^description = \".*\"#description = \"${start} ${environment} release of the surrealdb-core crate\"#" crates/core/Cargo.toml

          # Temporarily commit patch
          git commit -am "Patch crate names"

      - run: cat Cargo.toml
      - run: cat crates/sdk/Cargo.toml
      - run: cat crates/core/Cargo.toml

      - name: Publish the crate
        if: ${{ inputs.publish }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: release-plz release --config /tmp/release-plz.toml

      - name: Download artifacts
        if: ${{ inputs.publish }}
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # (Actions must be pinned by commit hash) v4.3.0
        with:
          path: artifacts

      - name: Publish release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # (Actions must be pinned by commit hash) v2.2.2
        if: ${{ inputs.publish && inputs.create-release }}
        with:
          tag_name: v${{ needs.prepare-vars.outputs.version }}
          name: "Release ${{ needs.prepare-vars.outputs.version }}"
          body: "Release ${{ needs.prepare-vars.outputs.version }}"
          target_commitish: ${{ needs.prepare-vars.outputs.release-branch }}
          prerelease: ${{ needs.prepare-vars.outputs.environment != 'stable' }}
          make_latest: ${{ inputs.latest }}
          fail_on_unmatched_files: true
          files: |
            LICENSE
            artifacts/surreal-${{ needs.prepare-vars.outputs.name }}.*/*.tgz
            artifacts/surreal-${{ needs.prepare-vars.outputs.name }}.*/*.exe

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # (Actions must be pinned by commit hash) v4.0.2
        if: ${{ inputs.publish }}
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AMAZON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AMAZON_SECRET_KEY }}

      - name: Set latest release version
        if: ${{ inputs.publish && inputs.create-release && inputs.latest }}
        run: |
          echo v${{ needs.prepare-vars.outputs.version }} > latest.txt
          aws s3 cp --cache-control 'no-store' latest.txt s3://download.surrealdb.com/latest.txt

      - name: Set latest alpha or beta version
        if: ${{ inputs.publish && (needs.prepare-vars.outputs.environment == 'alpha' || needs.prepare-vars.outputs.environment == 'beta') }}
        run: |
          echo v${{ needs.prepare-vars.outputs.version }} > ${{ needs.prepare-vars.outputs.environment }}.txt
          aws s3 cp --cache-control 'no-store' ${{ needs.prepare-vars.outputs.environment }}.txt s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.environment }}.txt

      - name: Publish binaries
        if: ${{ inputs.publish }}
        run: |
          for file in artifacts/**/*.{tgz,txt,exe}; do
            aws s3 cp --cache-control 'no-store' $file s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.name }}/
          done

  docker:
    name: Docker images
    needs: [prepare-vars, publish]
    if: ${{ inputs.publish }}
    uses: ./.github/workflows/docker.yml
    with:
      environment: ${{ needs.prepare-vars.outputs.environment }}
      git-ref: ${{ needs.prepare-vars.outputs.name }}
      tag-prefix: ${{ needs.prepare-vars.outputs.name }}
      latest: ${{ inputs.latest }}
      build: true
      push: true
    secrets: inherit

  package-macos:
    name: Package and publish macOS universal binary
    needs: [prepare-vars, publish]
    runs-on: macos-latest
    env:
      FILE: surreal-${{ needs.prepare-vars.outputs.name }}.darwin-universal
    steps:
      - name: Download amd64 binary
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # (Actions must be pinned by commit hash) v4.3.0
        with:
          name: surreal-${{ needs.prepare-vars.outputs.name }}.darwin-amd64
          path: amd64

      - name: Download arm64 binary
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # (Actions must be pinned by commit hash) v4.3.0
        with:
          name: surreal-${{ needs.prepare-vars.outputs.name }}.darwin-arm64
          path: arm64

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # (Actions must be pinned by commit hash) v4.0.2
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AMAZON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AMAZON_SECRET_KEY }}

      - name: Package universal MacOS binary
        run: |
          lipo -create -output surreal amd64/surreal arm64/surreal
          chmod +x surreal
          tar -zcvf $FILE.tgz surreal
          echo $(shasum -a 256 $FILE.tgz | cut -f1 -d' ') > $FILE.txt

      - name: Publish universal MacOS binary
        if: ${{ inputs.publish }}
        run: |
          aws s3 cp --cache-control 'no-store' $FILE.tgz s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.name }}/
          aws s3 cp --cache-control 'no-store' $FILE.txt s3://download.surrealdb.com/${{ needs.prepare-vars.outputs.name }}/

  propagate:
    name: Propagate binaries to all regions
    if: ${{ inputs.publish }}
    environment: ${{ needs.prepare-vars.outputs.environment }}
    needs: [publish, package-macos, prepare-vars]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # (Actions must be pinned by commit hash) v4.0.2
        with:
          aws-region: us-east-2
          aws-access-key-id: ${{ secrets.AMAZON_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AMAZON_SECRET_KEY }}

      - name: Distribute binaries
        run: |
          regions=("af-south-1" "ap-east-1" "ap-south-1" "ap-southeast-1" "ap-southeast-2" "ca-central-1" "eu-central-1" "eu-west-2" "me-south-1" "sa-east-1" "us-west-2")
          for region in ${regions[@]}; do
              aws s3 sync --delete --storage-class INTELLIGENT_TIERING --source-region eu-west-2 --region ${region} s3://download.surrealdb.com s3://download.${region}.surrealdb.com
          done

  cleanup:
    name: Cleanup
    permissions:
      contents: write
    needs: [publish, prepare-vars]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Delete ${{ needs.prepare-vars.outputs.release-branch }}
        run: git push origin --delete ${{ needs.prepare-vars.outputs.release-branch }} || true
