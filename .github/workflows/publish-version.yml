on:
  workflow_call:
    inputs:
      git-ref:
        required: true
        type: string
        description: "The git ref of this release version. All 'actions/checkout' steps will use it"
      suffix:
        type: string
        default: nightly
        description: "The suffix of the version, e.g. none, nightly, alpha.1 or beta.1"
      latest:
        required: false
        type: boolean
        default: false
        description: "Consider this release as the latest one and update the Docker image tag and the binary pointer for the installers"
      publish:
        required: false
        type: boolean
        default: false
        description: "Whether to publish this release"
      create-release:
        required: false
        type: boolean
        default: false
        description: "Create a GitHub release"
      rust_version:
        required: false
        type: string
        default: "1.85.0"
        description: "The Rust version to use for building binaries"
      onnx_version:
        required: false
        type: string
        default: "1.16.3"
        description: "The ONNX library version"
      extra-features:
        required: false
        type: string
        description: "Extra features enabled in the binary"
    secrets:
      AWS_CI_ACCESS_KEY_ID:
        description: "AWS access key ID"
      AWS_CI_SECRET_ACCESS_KEY:
        description: "AWS secret access key"

defaults:
  run:
    shell: bash

jobs:
  prepare-vars:
    name: Prepare vars
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.outputs.outputs.environment }}
      version: ${{ steps.outputs.outputs.version }}
      patch: ${{ steps.outputs.outputs.patch }}
      current-version: ${{ steps.outputs.outputs.current-version }}
      name: ${{ steps.outputs.outputs.name }}
      build-metadata: ${{ steps.outputs.outputs.build-metadata }}
      release-branch: ${{ steps.outputs.outputs.release-branch }}
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ inputs.rust_version }}

      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git-ref }}

      - name: Set outputs
        id: outputs
        run: |
          set -x

          suffix=$(echo ${{ inputs.suffix }} | tr "." "\n" | sed -n 1p)
          patch=$(echo ${{ inputs.suffix }} | tr "." "\n" | sed -n 2p)
          version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages | map(select(.name == "surrealdb"))[0].version')
          echo "current-version=${version}" >> $GITHUB_OUTPUT

          if [[ $version == *"-"* ]]; then
            echo "Found an unexpected pre-release version, '${version}', in ${{ inputs.git-ref }}"
            exit 400
          fi

          if [[ $suffix != "none" && $suffix != "nightly" && $suffix != "alpha" && $suffix != "beta" && $suffix != "rc" ]]; then
            echo "'${suffix}' is not a supported suffix"
            exit 400
          fi

          if [[ $suffix == "alpha" || $suffix == "beta" || $suffix == "rc" ]]; then
            if [[ -z $patch ]]; then
              echo "Pre-releases require a patch number, e.g. beta.3"
              exit 400
            elif ! [[ $patch =~ ^[0-9]+$ ]]; then
              echo "The patch number should be an integer, found ${patch}"
              exit 400
            fi
          fi

          if [[ $suffix == "none" ]]; then
            patch=$(echo ${version} | tr "." "\n" | sed -n 3p)
            environment=stable
          elif [[ $suffix == "nightly" ]]; then
            date=$(git show --no-patch --format=%ad --date=format:%Y%m%d)
            # This sets the nightly version to something like `1.3.20250224221932`
            patch=$(git show --no-patch --format=%ad --date=format:%Y%m%d%H%M%S)
            rev=$(git rev-parse --short HEAD)
            buildMetadata=${date}.${rev}
            version=${version}-${{ inputs.suffix }}
            environment=${{ inputs.suffix }}
          elif [[  $suffix == "rc" ]]; then
            version=${version}-${{ inputs.suffix }}
            patch=$(($patch - 1))
            environment=release-candidate
          else
            version=${version}-${{ inputs.suffix }}
            patch=$(($patch - 1))
            environment=${suffix}
          fi

          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "patch=${patch}" >> $GITHUB_OUTPUT
          echo "environment=${environment}" >> $GITHUB_OUTPUT
          echo "build-metadata=${buildMetadata}" >> $GITHUB_OUTPUT
          echo "release-branch=releases/${version}" >> $GITHUB_OUTPUT

          if [[ "${environment}" == "nightly" ]]; then
            echo "name=${environment}" >> $GITHUB_OUTPUT
          else
            echo "name=v${version}" >> $GITHUB_OUTPUT
          fi

      - name: Configure git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git config --add --bool push.autoSetupRemote true

      - name: Create release branch
        run: |
          set -x

          git push origin --delete ${{ steps.outputs.outputs.release-branch }} || true
          git checkout -b ${{ steps.outputs.outputs.release-branch }}

      - name: Patch release version
        if: ${{ steps.outputs.outputs.environment != 'stable' }}
        run: |
          set -x

          version=${{ steps.outputs.outputs.version }}
          currentVersion=${{ steps.outputs.outputs.current-version }}

          # Bump the crate version
          sed -i "s#^version = \".*\"#version = \"${version}\"#" Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/sdk/Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/core/Cargo.toml

          # Update dependency versions
          sed -i "s#surrealdb = { version = \"=${currentVersion}\"#surrealdb = { version = \"=${version}\"#" Cargo.toml
          sed -i "s#surrealdb-core = { version = \"=${currentVersion}\"#surrealdb-core = { version = \"=${version}\"#" Cargo.toml

          # Update Cargo.lock without updating dependency versions
          cargo check --no-default-features --features storage-mem

          # Commit changes
          git commit -am "Prepare v${version} release"

      - name: Push the release branch
        run: git push

  publish:
    name: Publish crate and artifacts binaries
    needs: [prepare-vars]
    runs-on: [runner-amd64-2xlarge]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-vars.outputs.release-branch }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Install Cargo release
        run: cargo install --force --locked --version 0.25.18 cargo-release

      - name: Create a temporary branch
        run: git checkout -b crate

      - name: Patch crate version
        if: ${{ needs.prepare-vars.outputs.environment != 'stable' }}
        run: |
          set -x

          # Derive crate version
          currentVersion=${{ needs.prepare-vars.outputs.current-version }}
          major=$(echo $currentVersion | tr "." "\n" | sed -n 1p)
          minor=$(echo $currentVersion | tr "." "\n" | sed -n 2p)
          version=${major}.${minor}.${{ needs.prepare-vars.outputs.patch }}

          # Update the version to a nightly one
          sed -i "s#^version = \".*\"#version = \"${version}\"#" Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/sdk/Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" crates/core/Cargo.toml
          sed -i "s#surrealdb = { version = \"=${{ needs.prepare-vars.outputs.version }}\"#surrealdb = { version = \"=${version}\"#" Cargo.toml
          sed -i "s#surrealdb-core = { version = \"=${{ needs.prepare-vars.outputs.version }}\"#surrealdb-core = { version = \"=${version}\"#" Cargo.toml

      - name: Patch crate name and description
        if: ${{ needs.prepare-vars.outputs.environment != 'stable' }}
        run: |
          set -x

          environment=${{ needs.prepare-vars.outputs.environment }}

          # Patch crate name
          sed -i "0,/surrealdb/s//surrealdb-${environment}/" crates/sdk/Cargo.toml
          sed -i "0,/surrealdb-core/s//surrealdb-core-${environment}/" crates/core/Cargo.toml

          # Patch dependency package
          sed -i "s/package = \"surrealdb\"/package = \"surrealdb-${environment}\"/" Cargo.toml
          sed -i "s/package = \"surrealdb-core\"/package = \"surrealdb-core-${environment}\"/" Cargo.toml

          # Patch the description
          if [[ $environment == 'alpha' ]]; then
            start="An"
          else
            start="A"
          fi
          sed -i "s#^description = \".*\"#description = \"${start} ${environment} release of the surrealdb crate\"#" crates/sdk/Cargo.toml
          sed -i "s#^description = \".*\"#description = \"${start} ${environment} release of the surrealdb-core crate\"#" crates/core/Cargo.toml

          # Temporarily commit patches
          # These should not be pushed back to the repo
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git commit -am "Name and version patches"

      - run: cat Cargo.toml
      - run: cat crates/sdk/Cargo.toml
      - run: cat crates/core/Cargo.toml

      - name: Publish the crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          set -x

          if [[ "${{ inputs.publish }}" == "true" ]]; then
            extraArgs="--execute"
          else
            extraArgs=""
          fi

          cargo release publish --workspace --exclude surreal --no-confirm $extraArgs

  cleanup:
    name: Cleanup
    needs: [publish, prepare-vars]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Delete ${{ needs.prepare-vars.outputs.release-branch }}
        run: git push origin --delete ${{ needs.prepare-vars.outputs.release-branch }} || true
