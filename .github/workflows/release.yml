# Use this workflow to trigger stable releases, both minor releases and patches

name: Stable release

run-name: "Stable release '${{ inputs.branch }}' (publish: ${{ inputs.publish }}, latest: ${{ inputs.branch == 'releases/beta' || inputs.latest }})"

on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        type: string
        description: "The github branch of this release. Should be 'releases/beta' or 'patches/x.y'"
        default: releases/beta
      latest:
        required: false
        type: boolean
        default: false
        description: "Consider this release as the latest one and update the Docker image tag and the binary pointer for the installers"
      publish:
        required: false
        type: boolean
        default: false
        description: "Publish the release"

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  checks:
    name: Pre-release checks
    runs-on: ubuntu-latest
    steps:
      - name: Verify that the provided branch is either a release branch or a patch branch
        run: |
          set -x
          if [[ "${{ inputs.branch }}" == "releases/beta" || "${{ inputs.branch }}" == "patches/"* ]]; then
            exit 0
          else
            echo "Branch should either be 'releases/beta' or 'patches/x.y'"
            exit 1
          fi

  release:
    name: Prepare release
    needs: [checks]
    uses: ./.github/workflows/reusable_publish_version.yml
    with:
      environment: release
      git-ref: ${{ inputs.branch }}
      latest: ${{ inputs.branch == 'releases/beta' || inputs.latest }}
      publish: ${{ inputs.publish }}
      create-release: ${{ inputs.publish }}
    secrets: inherit

  release-branch:
    name: Delete release branch
    if: ${{ inputs.publish }}
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Install stable toolchain
        if: ${{ inputs.branch == 'releases/beta' }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install a TOML parser
        if: ${{ inputs.branch == 'releases/beta' }}
        run: cargo install --force --locked --version 0.8.1 taplo-cli

      - name: Bump main version
        if: ${{ inputs.branch == 'releases/beta' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x

          # Retrieve just released version
          version=$(/home/runner/.cargo/bin/taplo get -f lib/Cargo.toml "package.version")

          # Checkout the main branch
          git checkout -b version-bump-v${version} main

          # Bump the crate version
          sed -i "s#^version = \".*\"#version = \"${version}\"#" Cargo.toml
          sed -i "s#^version = \".*\"#version = \"${version}\"#" lib/Cargo.toml

          # Update Cargo.lock without updating dependency versions
          cargo check --no-default-features --features storage-mem

          # Commit changes
          git commit -am "Bump version"
          gh pr create --base main --title "Bump version to ${version}" --label version-bump

      - name: Delete the release branch
        run: git push --delete ${{ inputs.branch }}
