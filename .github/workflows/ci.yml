name: Continuous integration

run-name: "CI run '${{ github.head_ref || github.ref_name }}'"

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  # Use github.run_id on main branch
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # Use github.ref on other branches, so it's unique per branch
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  RUSTFLAGS: "--cfg surrealdb_unstable"

jobs:
  format:
    name: Check format
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check format
        run: cargo make ci-format

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Run clippy
        run: cargo make ci-clippy

      - name: Run clippy release
        run: cargo make ci-clippy-release

  check:
    name: Check workspace
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check workspace
        run: cargo make ci-check

      - name: Check workspace release
        run: cargo make ci-check-release

  check-msrv:
    name: Check workspace MSRV
    runs-on: ubuntu-latest
    steps:
      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@1.80.1

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check workspace on MSRV
        run: cargo make ci-check

      - name: Check workspace release on MSRV
        run: cargo make ci-check-release

  check-fuzzing:
    name: Check fuzzing
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          workspaces: crates/fuzz

      - name: Check fuzzers
        run: cargo build --manifest-path crates/fuzz/Cargo.toml

      - name: Check OSS-Fuzz
        uses: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers@master
        with:
          oss-fuzz-project-name: surrealdb
          language: rust
        # Temporarily allow this step to fail
        continue-on-error: true

  check-wasm:
    name: Check Wasm
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Check wasm
        run: cargo make ci-check-wasm

  check-revision:
    name: Check revision
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install revision-lock
        run: cargo install revision-lock

      - name: Check revision.lock
        run: revision-lock --check

  cli-integration:
    name: CLI integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Run CLI integration tests
        run: cargo make ci-cli-integration

  http-integration:
    name: HTTP integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Run HTTP integration tests
        run: cargo make ci-http-integration

  ws-integration:
    name: WebSocket integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Run WebSocket integration tests
        run: cargo make ci-ws-integration

  ml-integration:
    name: ML integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Run ML integration tests
        run: cargo make ci-ml-integration

  graphql-integration:
    name: GraphQL integration
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Run GraphQL integration tests
        run: cargo make ci-graphql-integration

  test:
    name: Test workspace
    runs-on: [runner-arm64-2xlarge]
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install dependencies
        run: sudo apt-get -y update

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test workspace + coverage
        run: cargo make ci-workspace-coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        timeout-minutes: 1
        continue-on-error: true
        with:
          name: code-coverage-report
          path: target/llvm-cov/html/
          retention-days: 5

  sdk-build:
    name: Test SDK build
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Build local
        working-directory: tests/sdk/local
        run: cargo build

      - name: Build remote
        working-directory: tests/sdk/remote
        run: cargo build

  any-engine:
    name: Rust SDK - Any engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test Any engine
        run: cargo make ci-api-integration-any

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  ws-engine:
    name: Rust SDK - WebSocket engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test WS engine
        run: cargo make ci-api-integration-ws

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  http-engine:
    name: Rust SDK - HTTP engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test HTTP engine
        run: cargo make ci-api-integration-http

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  mem-engine:
    name: Rust SDK - Memory engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test Memory engine
        run: cargo make ci-api-integration-mem

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  file-engine:
    name: Rust SDK - File engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test File engine
        run: cargo make ci-api-integration-file

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  rocksdb-engine:
    name: Rust SDK - RocksDB engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test RocksDB engine
        run: cargo make ci-api-integration-rocksdb

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  surrealkv-engine:
    name: Rust SDK - SurrealKV engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test SurrealKV engine
        run: cargo make ci-api-integration-surrealkv

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  tikv-engine:
    name: Rust SDK - TiKV engine
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install TiUP
        timeout-minutes: 10
        run: |
          while ! ~/.tiup/bin/tiup -v; do
            curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
          done

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test TiKV engine
        run: cargo make ci-api-integration-tikv

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  fdb-engine-7-1:
    name: Rust SDK - FoundationDB engine 7.1
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Setup FoundationDB
        uses: foundationdb-rs/foundationdb-actions-install@v.2.2.0
        with:
          version: "7.1.61"

      - name: Test FoundationDB engine
        run: cargo make ci-api-integration-fdb-7_1

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  fdb-engine-7-3:
    name: Rust SDK - FoundationDB engine 7.3
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Setup FoundationDB
        uses: foundationdb-rs/foundationdb-actions-install@v.2.2.0
        with:
          version: "7.3.47"

      - name: Test FoundationDB engine
        run: cargo make ci-api-integration-fdb-7_3

      - name: Debug info
        if: always()
        run: |
          set -x
          free -m
          df -h
          ps auxf

  db-upgrade:
    name: Database Upgrade from previous versions
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-make
        run: cargo install --debug --locked cargo-make

      - name: Test upgrade
        run: cargo make ci-database-upgrade

  lang-tests:
    name: Run SurrealQL language tests
    runs-on: ubuntu-latest
    steps:
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          workspaces: crates/language-tests

      - name: Run Suite
        run: |
          cd crates/language-tests
          cargo build
          ./target/debug/surrealql-test --color always run
